# -*- coding: utf-8 -*-
"""mmr.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kbCpqlncDXypTsDq4DTGJa3Do-9JEGyp
"""

import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from typing import List, Tuple


def mmr(
    doc_embedding: np.ndarray,
    word_embeddings: np.ndarray,
    words: List[str],
    top_n: int = 5,
    diversity: float = 0.8,
) -> List[Tuple[str, float]]:
    """
    最大边界相关算法 (MMR)
    MMR 考虑关键字/关键短语与文档的相似性，以及已选择的关键字和关键短语的相似性。 
    这导致选择的关键字在文档中最大化它们的多样性。
    
    返回值:
         List[Tuple[str, float]]: 关键词和词库的距离即相似度
    """

    # 文字相似度以及文字和文档之间的相似度
    word_doc_similarity = cosine_similarity(word_embeddings, doc_embedding)
    word_similarity = cosine_similarity(word_embeddings)

    # 初始化备选词表
    keywords_idx = [np.argmax(word_doc_similarity)]
    candidates_idx = [i for i in range(len(words)) if i != keywords_idx[0]]

    for _ in range(min(top_n - 1, len(words) - 1)):
        # Extract similarities within candidates and
        # between candidates and selected keywords/phrases
        candidate_similarities = word_doc_similarity[candidates_idx, :]
        target_similarities = np.max(
            word_similarity[candidates_idx][:, keywords_idx], axis=1
        )

        # 计算 MMR
        mmr = (
            1 - diversity
        ) * candidate_similarities - diversity * target_similarities.reshape(-1, 1)
        mmr_idx = candidates_idx[np.argmax(mmr)]

        # 更新关键词以及候选词表
        keywords_idx.append(mmr_idx)
        candidates_idx.remove(mmr_idx)

    return [
        (words[idx], round(float(word_doc_similarity.reshape(1, -1)[0][idx]), 4))
        for idx in keywords_idx
    ]