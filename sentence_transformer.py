# -*- coding: utf-8 -*-
"""sentence_transformer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Or5LQG45ESO-kjAIdd9NqmRgHZfHbct_
"""

import numpy as np
from typing import List, Union
from sentence_transformers import SentenceTransformer

from keybert.backend import BaseEmbedder


class SentenceTransformerBackend(BaseEmbedder):
    """
    Sentence-transformers embedding model
    用于生成文档和单词嵌入的句子嵌入模型。

    ```python
    from keybert.backend import SentenceTransformerBackend
    from sentence_transformers import SentenceTransformer
    embedding_model = SentenceTransformer("all-MiniLM-L6-v2")
    sentence_model = SentenceTransformerBackend(embedding_model)
    ```
    """

    def __init__(self, embedding_model: Union[str, SentenceTransformer]):
        super().__init__()

        if isinstance(embedding_model, SentenceTransformer):
            self.embedding_model = embedding_model
        elif isinstance(embedding_model, str):
            self.embedding_model = SentenceTransformer(embedding_model)
        else:
            raise ValueError(
                "选择正确的SentenceTransformer模型比如: \n"
                "`model = SentenceTransformer('all-MiniLM-L6-v2')`"
            )

    def embed(self, documents: List[str], verbose: bool = False) -> np.ndarray:
        """
        将包含 n 个文档/单词的列表嵌入到嵌入的 n 维矩阵中


        返回值:
            形状为 (n, m) 的文档/单词嵌入，带有“n”个文档/单词，每个文档/单词的嵌入大小为“m” 
            
        """
        embeddings = self.embedding_model.encode(documents, show_progress_bar=verbose)
        return embeddings